1:"$Sreact.fragment"
2:I[31725,["2619","static/chunks/2619-04bc32f026a0d946.js","1356","static/chunks/1356-1fb83b63ccda55b7.js","7177","static/chunks/app/layout-6ec40e3264443086.js"],"default"]
3:I[9766,[],""]
4:I[98924,[],""]
5:I[81356,["2619","static/chunks/2619-04bc32f026a0d946.js","1356","static/chunks/1356-1fb83b63ccda55b7.js","8974","static/chunks/app/page-582ea57ab1f262de.js"],"Image"]
d:I[57150,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ac21ffa8d850336f.css","style"]
0:{"P":null,"b":"pEsEjINp4kDNTfe7XQRO1","p":"","c":["","blog","useState"],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","useState","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ac21ffa8d850336f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ko","className":"__variable_f367f3","children":["$","body",null,{"className":"font-sans antialiased bg-gray-900 text-white min-h-screen","children":["$","div",null,{"className":"min-h-screen flex flex-col","children":[["$","$L2",null,{}],["$","main",null,{"className":"flex-1 py-8 px-4 sm:px-6 lg:px-8 pb-20 md:pb-8","children":["$","div",null,{"className":"max-w-6xl mx-auto","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}],["$","footer",null,{"className":"bg-white/5 backdrop-blur-md border-t border-white/10 mt-20","children":["$","div",null,{"className":"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12","children":[["$","div",null,{"className":"flex flex-row justify-between items-center gap-8","children":[["$","div",null,{"className":"space-y-4","children":[["$","div",null,{"className":"flex items-center space-x-3","children":[["$","div",null,{"className":"w-8 h-8 rounded-full overflow-hidden","children":["$","$L5",null,{"src":"/msm.jpeg","alt":"MSM Profile","width":32,"height":32,"className":"w-full h-full object-cover"}]}],["$","span",null,{"className":"text-xl font-bold text-white","children":"msm.dev"}]]}],["$","p",null,{"className":"text-gray-400 text-sm","children":["개발자라서 즐거운",["$","br",null,{}],"Front-end Developer MSM"]}]]}],["$","div",null,{"className":"flex space-x-4","children":[["$","a",null,{"href":"mailto:masungmin.dev@gmail.com","className":"text-gray-400 hover:text-white transition-colors duration-200","aria-label":"이메일","children":["$","svg",null,{"className":"w-6 h-6","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"}]}]}],["$","a",null,{"href":"https://github.com/masungmin-dev","className":"text-gray-400 hover:text-white transition-colors duration-200","aria-label":"GitHub","children":["$","svg",null,{"className":"w-6 h-6","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}]}],"$L6"]}]]}],"$L7"]}]}],"$L8"]}]}]}]]}],{"children":["blog","$L9",{"children":[["slug","useState","d"],"$La",{"children":["__PAGE__","$Lb",{},null,false]},null,false]},null,false]},null,false],"$Lc",false]],"m":"$undefined","G":["$d",[]],"s":false,"S":true}
e:I[79240,["2619","static/chunks/2619-04bc32f026a0d946.js","1356","static/chunks/1356-1fb83b63ccda55b7.js","7177","static/chunks/app/layout-6ec40e3264443086.js"],"default"]
10:I[24431,[],"OutletBoundary"]
12:I[15278,[],"AsyncMetadataOutlet"]
14:I[24431,[],"ViewportBoundary"]
16:I[24431,[],"MetadataBoundary"]
17:"$Sreact.suspense"
6:["$","a",null,{"href":"https://www.linkedin.com/in/%EC%84%B1%EB%AF%BC-%EB%A7%88-306256194","className":"text-gray-400 hover:text-white transition-colors duration-200","aria-label":"LinkedIn","children":["$","svg",null,{"className":"w-6 h-6","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"}]}]}]
7:["$","div",null,{"className":"mt-8 pt-8 border-t border-white/10","children":["$","div",null,{"className":"flex flex-col md:flex-row justify-between items-center gap-4","children":[["$","div",null,{"className":"flex items-center","children":["$","a",null,{"href":"https://hits.sh/masungmin-dev.github.io/","children":["$","img",null,{"alt":"Hits","src":"https://hits.sh/masungmin-dev.github.io.svg?style=flat-square&label=Thanks%20for%20visit&color=616161&labelColor=424242"}]}]}],["$","p",null,{"className":"text-gray-400 text-sm order-1 md:order-2","children":["© ",2025," msm.dev. All rights reserved."]}]]}]}]
8:["$","$Le",null,{}]
9:["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
a:["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
b:["$","$1","c",{"children":["$Lf",null,["$","$L10",null,{"children":["$L11",["$","$L12",null,{"promise":"$@13"}]]}]]}]
c:["$","$1","h",{"children":[null,[["$","$L14",null,{"children":"$L15"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$L16",null,{"children":["$","div",null,{"hidden":true,"children":["$","$17",null,{"fallback":null,"children":"$L18"}]}]}]]}]
19:I[52619,["590","static/chunks/0dbeb660-c36e335de0d55418.js","2619","static/chunks/2619-04bc32f026a0d946.js","7485","static/chunks/7485-0e57fd9e4a68a3f7.js","5953","static/chunks/app/blog/%5Bslug%5D/page-d3d26fb3dc9355df.js"],""]
f:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","div",null,{"className":"hidden lg:block","children":["$","aside",null,{"className":"lg:w-64 lg:flex-shrink-0","children":["$","div",null,{"className":"lg:sticky lg:top-24 sticky-sidebar","children":["$","div",null,{"className":"glass-effect rounded-xl p-4","children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-400 uppercase tracking-wider mb-3","children":"태그"}],["$","div",null,{"className":"space-y-1","children":[["$","$L19",null,{"href":"/blog","className":"block w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 text-sm bg-blue-500/20 text-blue-300","children":["전체 (",7,")"]}],[["$","$L19","javascript",{"href":"/blog?tag=javascript","className":"flex w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 items-center justify-between text-sm text-gray-400 hover:text-white hover:bg-gray-700/50","children":[["$","span",null,{"children":"javascript"}],["$","span",null,{"className":"text-xs text-gray-500","children":4}]]}],["$","$L19","React.js",{"href":"/blog?tag=React.js","className":"flex w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 items-center justify-between text-sm text-gray-400 hover:text-white hover:bg-gray-700/50","children":[["$","span",null,{"children":"React.js"}],["$","span",null,{"className":"text-xs text-gray-500","children":3}]]}],["$","$L19","github",{"href":"/blog?tag=github","className":"flex w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 items-center justify-between text-sm text-gray-400 hover:text-white hover:bg-gray-700/50","children":[["$","span",null,{"children":"github"}],["$","span",null,{"className":"text-xs text-gray-500","children":2}]]}],["$","$L19","Langchain",{"href":"/blog?tag=Langchain","className":"flex w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 items-center justify-between text-sm text-gray-400 hover:text-white hover:bg-gray-700/50","children":[["$","span",null,{"children":"Langchain"}],["$","span",null,{"className":"text-xs text-gray-500","children":1}]]}],["$","$L19","git",{"href":"/blog?tag=git","className":"flex w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 items-center justify-between text-sm text-gray-400 hover:text-white hover:bg-gray-700/50","children":[["$","span",null,{"children":"git"}],["$","span",null,{"className":"text-xs text-gray-500","children":1}]]}],["$","$L19","잡소리",{"href":"/blog?tag=%EC%9E%A1%EC%86%8C%EB%A6%AC","className":"flex w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 items-center justify-between text-sm text-gray-400 hover:text-white hover:bg-gray-700/50","children":[["$","span",null,{"children":"잡소리"}],["$","span",null,{"className":"text-xs text-gray-500","children":1}]]}],["$","$L19","Next.js",{"href":"/blog?tag=Next.js","className":"flex w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 items-center justify-between text-sm text-gray-400 hover:text-white hover:bg-gray-700/50","children":[["$","span",null,{"children":"Next.js"}],["$","span",null,{"className":"text-xs text-gray-500","children":1}]]}]]]}]]}]}]}]}],["$","div",null,{"className":"flex-1 min-w-0","children":[["$","div",null,{"className":"mb-8","children":["$","$L19",null,{"href":"/blog","className":"inline-flex items-center text-gray-400 hover:text-white transition-colors duration-200","children":[["$","svg",null,{"className":"mr-2 w-5 h-5","fill":"none","stroke":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":2,"d":"M10 19l-7-7m0 0l7-7m-7 7h18"}]}],"블로그 목록으로 돌아가기"]}]}],["$","header",null,{"className":"mb-12","children":[["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","React.js",{"className":"px-3 py-1 bg-blue-500/20 text-blue-300 rounded-full text-sm font-medium","children":"React.js"}],["$","span","javascript",{"className":"px-3 py-1 bg-blue-500/20 text-blue-300 rounded-full text-sm font-medium","children":"javascript"}]]}],"$L1a","$L1b"]}],"$L1c","$L1d","$L1e"]}]]}]
1f:I[82787,["590","static/chunks/0dbeb660-c36e335de0d55418.js","2619","static/chunks/2619-04bc32f026a0d946.js","7485","static/chunks/7485-0e57fd9e4a68a3f7.js","5953","static/chunks/app/blog/%5Bslug%5D/page-d3d26fb3dc9355df.js"],"default"]
21:I[50528,["590","static/chunks/0dbeb660-c36e335de0d55418.js","2619","static/chunks/2619-04bc32f026a0d946.js","7485","static/chunks/7485-0e57fd9e4a68a3f7.js","5953","static/chunks/app/blog/%5Bslug%5D/page-d3d26fb3dc9355df.js"],"default"]
1a:["$","h1",null,{"className":"text-4xl md:text-5xl font-bold text-white mb-4 leading-tight","children":"useState를 직접 구현하라는 얘기를 들었어요"}]
1b:["$","div",null,{"className":"flex items-center text-gray-400 text-sm","children":[["$","svg",null,{"className":"mr-2 w-4 h-4","fill":"none","stroke":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":2,"d":"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"}]}],"2025년 10월 7일"]}]
20:T224b,<h2>개요</h2>
<p>친구랑 대화하다가 useState를 직접 구현해보았냐는 이야기를 들었다</p>
<p>React의 업데이트내용은 프론트엔드 개발자로서 쫓아가야하는 필수 코스기도 하다보니 읽고나서 대강대강 이렇겠거니 생각은 하고있었으나 막상 만들자고 하면 또 분명 머뭇거릴거다. 그래서 한번 복기해보기.(사실 뭔가 끄적이고 싶었어)</p>
<p>물론 제일 좋은것은 직접 구현코드를 쫓아가보는게 좋고 요즘엔 <a href="https://deepwiki.com/">https://deepwiki.com/</a> 와 같은 서비스도 있어서, 참고하면 더 좋은것같다.</p>
<p>&quot;직접 구현해보았느냐&quot; 라는 맥락에는 왠지 아래와 같은 뜻이 있는것같다.(아닐수도있음.. 그냥 개인적인 의견입니다ㅋ)</p>
<ul>
<li>내부 구조를 이해하고있는가</li>
<li>상태 변화에 따른 렌더 타이밍을 만들어볼 수 있을까</li>
<li>그 렌더 타이밍을 어떻게 최적화 할 수 있는가</li>
</ul>
<p>등등이 아닐까 싶었다.</p>
<p>애초에 구현을 모두 하는건 현실적이지않다. 그렇다면 역시 <strong>이런 흐름을 만들 수 있는지 이해하면서 생각, 활용할 수 있는가</strong>가 중요한것같다.</p>
<h2>차근차근</h2>
<p>단계별로 구현하면서 이해하는건 항상 이해하는데 도움이 된다고 생각하는 편이라</p>
<p>단순 버전을 먼저 코드로 그려보고 이해해보자. 컴포넌트는 편의상 한개만 존재한다고 생각해두자. 지금은 상태 업데이트를 관리하는 그 흐름을 이해하는 과정에 집중해보자</p>
<h3>1단계: 단순버전</h3>
<p>격리된 상태에 useState에 기본 인터페이스만 구현되어있는 상태다.</p>
<p>상태가 변경된 후에는 당연히 render 함수가 실행되어야할 것이다. 일단 눈에 잘 보이게 render 를 주입받도록 해두자.</p>
<p>지금은 모든 상태 업데이트마다마다 대상이 렌더가 되는 형태이다.</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">let</span> state;

<span class="hljs-keyword">function</span> <span class="hljs-title function_">useState</span>(<span class="hljs-params">initialValue, render</span>) {
  <span class="hljs-keyword">if</span> (state === <span class="hljs-literal">undefined</span>) {
    state = initialValue;
  }

  <span class="hljs-keyword">const</span> <span class="hljs-title function_">setState</span> = newValue =&gt; {
    state = newValue;
    <span class="hljs-title function_">render</span>();
  };

  <span class="hljs-keyword">return</span> [state, setState];
}
</code></pre><h3>2단계: 상태가 여러개가 될 수 있음을 고려하자</h3>
<p>이번엔 states를 배열로 만들어서 컴포넌트에 상태를 여러개 넣을 수 있다는 가정이다.</p>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">let</span> states = [];
<span class="hljs-keyword">let</span> currentIndex = <span class="hljs-number">0</span>;

<span class="hljs-keyword">function</span> <span class="hljs-title function_">useState</span>(<span class="hljs-params">initialValue, render</span>) {
  <span class="hljs-keyword">const</span> index = currentIndex; <span class="hljs-comment">// 클로저로 인덱스 캡처</span>

  <span class="hljs-comment">// 최초 렌더링 시에만 초기화</span>
  <span class="hljs-keyword">if</span> (states[index] === <span class="hljs-literal">undefined</span>) {
    states[index] = initialValue;
  }

  <span class="hljs-keyword">const</span> <span class="hljs-title function_">setState</span> = newValue =&gt; {
    states[index] = newValue;
    currentIndex = <span class="hljs-number">0</span>; <span class="hljs-comment">// 다음 렌더링을 위해 인덱스 리셋</span>
    <span class="hljs-title function_">render</span>();
  };

  currentIndex++; <span class="hljs-comment">// 다음 useState를 위해 증가</span>
  <span class="hljs-keyword">return</span> [states[index], setState];
}
</code></pre><h3>3단계: 렌더링이 자주 일어나지 않게 방지하자</h3>
<p>단순 값비교로, 렌더가 일어나면 안되는 상황을 만들어주었다.</p>
<pre><code class="hljs language-ts"><span class="hljs-keyword">let</span> states = [];
<span class="hljs-keyword">let</span> currentIndex = <span class="hljs-number">0</span>;

<span class="hljs-keyword">function</span> <span class="hljs-title function_">useState</span>(<span class="hljs-params">initialValue, render</span>) {
  <span class="hljs-keyword">const</span> index = currentIndex;

  <span class="hljs-keyword">if</span> (states[index] === <span class="hljs-literal">undefined</span>) {
    states[index] = initialValue;
  }

  <span class="hljs-keyword">const</span> <span class="hljs-title function_">setState</span> = newValue =&gt; {
    <span class="hljs-comment">// 값이 실제로 변경되었을 때만 렌더링</span>
    <span class="hljs-keyword">if</span> (newValue !== states[index]) {
      states[index] = newValue;
      currentIndex = <span class="hljs-number">0</span>;
      <span class="hljs-title function_">render</span>();
    }
  };

  currentIndex++;
  <span class="hljs-keyword">return</span> [states[index], setState];
}
</code></pre><h3>4단계: 배치 업데이트 형태로 렌더링을 좀더 좁혀주자</h3>
<p>이번엔 스케쥴링을 추가했다. 값에 변화가 있다면 스케쥴링에 추가하고, 많은 업데이트가 동시에 발생했을때 그 렌더 횟수를 줄이는 역할을 위함이다.</p>
<p>여기서 마이크로태스크 큐 관련된 내용이 나오는데 잘 정리된 문서가 하나 있으니 <a href="https://developer.mozilla.org/ko/docs/Web/API/HTML_DOM_API/Microtask_guide">참고</a></p>
<pre><code class="hljs language-ts"><span class="hljs-comment">// 3단계 코드에서 해당 함수를 추가하고 render 의 실행을 위임한다고 생각하고 간략하게 보자.</span>

<span class="hljs-keyword">let</span> isScheduled = <span class="hljs-literal">false</span>;
<span class="hljs-keyword">let</span> scheduledRender = <span class="hljs-literal">null</span>;

<span class="hljs-keyword">function</span> <span class="hljs-title function_">scheduleRender</span>(<span class="hljs-params">render</span>) {
  scheduledRender = render;

  <span class="hljs-keyword">if</span> (!isScheduled) {
    isScheduled = <span class="hljs-literal">true</span>;
    <span class="hljs-title function_">queueMicrotask</span>(<span class="hljs-function">() =&gt;</span> {
      isScheduled = <span class="hljs-literal">false</span>;
      currentIndex = <span class="hljs-number">0</span>;
      <span class="hljs-keyword">if</span> (scheduledRender) {
        <span class="hljs-title function_">scheduledRender</span>();
        scheduledRender = <span class="hljs-literal">null</span>;
      }
    });
  }
}
</code></pre><h3>그외..</h3>
<p>여기서 더 나아가면 분명 나올만한 요소는 다음과 같을 것 같다.</p>
<ul>
<li>상태를 업데이트 큐 공간을 만들어서 업데이트를 한번에 진행하기(마이크로 태스크 큐에 상태에 대한 실질적 업데이트를 몰아서 하기)</li>
<li>우선순위 기반으로 스케쥴링해서 렌더링을 조금 더 타이트하게 관리할 수 있도록 만들기</li>
</ul>
<h2>알아두면 좋은 이유는 뭘까</h2>
<p>결국 상태 관리의 기본인 useState의 흐름에 대해 이해하면 얕은 깊든 분명 도움이 될 것이라고 생각한다.</p>
<p>이러한 흐름을 이해하고 구현되어있는 내용에 대해 이해하기 시작하면 어떻게 하면 좀더 좋은 UX를 만들기위해 최적화를 할 수 있을지 아이디어가 떠오를 수 있게 된다.</p>
<p>이뿐만 아니라 React에서 위임되어있는 많은 과정에서 React는 각각에 맞는 최적화 기법을 사용하고있을 것이다.</p>
<p>특히 이런 요소들에 대한 이해는 <a href="https://ko.react.dev/reference/react/useTransition">useTransition</a>이나 <a href="https://ko.react.dev/reference/react/useDeferredValue">useDeferredValue</a> 같은 다양한 훅들을 추후 적재적소에 사용할 수 있는 생각으로 이어질 수 있다고 생각한다.</p>
<p>하지만 아직 안써봣어도 상관없다. 어차피 훅들은 API일 뿐이고 이러한 요소들은 React가 매지컬하게 하고있는 그러한 기법 사이에서 사용자가 느낄 수 있는 애로사항들을 API로 접근할 수 있게 알차게 뚫어둔 요소라고 생각한다.</p>
<p>이해를 기반으로 하고있다면 언젠가 사용할 날이 없더라도 크고 작은 그림을 그리는데 도움이 되는것 같았다.</p>
1c:["$","$L1f",null,{"content":"$20","mermaidBlocks":"$undefined"}]
1d:["$","footer",null,{"className":"mt-16 pt-8 border-t border-gray-700","children":["$","div",null,{"className":"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4","children":[["$","div",null,{"className":"text-gray-400 text-sm","children":["$","p",null,{"children":"읽어주셔서 감사합니다. 틀린 내용은 언제든지 댓글로 알려주세요."}]}],["$","div",null,{"className":"flex space-x-4","children":[["$","$L19",null,{"href":"/blog","className":"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200","children":"다른 포스트 보기"}],["$","$L19",null,{"href":"/","className":"px-4 py-2 border border-gray-600 hover:bg-gray-800 text-gray-300 font-medium rounded-lg transition-colors duration-200","children":"홈으로"}]]}]]}]}]
1e:["$","$L21",null,{}]
15:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
11:null
22:I[80622,[],"IconMark"]
13:{"metadata":[["$","title","0",{"children":"useState를 직접 구현하라는 얘기를 들었어요 | msm.dev"}],["$","meta","1",{"name":"description","content":"잠깐 생각해볼까?"}],["$","meta","2",{"name":"author","content":"MSM"}],["$","meta","3",{"name":"keywords","content":"React.js,javascript"}],["$","meta","4",{"property":"og:title","content":"useState를 직접 구현하라는 얘기를 들었어요"}],["$","meta","5",{"property":"og:description","content":"잠깐 생각해볼까?"}],["$","meta","6",{"property":"og:type","content":"article"}],["$","meta","7",{"property":"article:published_time","content":"2025-10-07"}],["$","meta","8",{"property":"article:tag","content":"React.js"}],["$","meta","9",{"property":"article:tag","content":"javascript"}],["$","meta","10",{"name":"twitter:card","content":"summary"}],["$","meta","11",{"name":"twitter:title","content":"useState를 직접 구현하라는 얘기를 들었어요"}],["$","meta","12",{"name":"twitter:description","content":"잠깐 생각해볼까?"}],["$","link","13",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","$L22","14",{}]],"error":null,"digest":"$undefined"}
18:"$13:metadata"
