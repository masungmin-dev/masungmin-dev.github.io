1:"$Sreact.fragment"
2:I[1725,["619","static/chunks/619-ba102abea3e3d0e4.js","356","static/chunks/356-f53269e63c687b55.js","177","static/chunks/app/layout-159109887e91e394.js"],"default"]
3:I[9766,[],""]
4:I[8924,[],""]
5:I[1356,["619","static/chunks/619-ba102abea3e3d0e4.js","356","static/chunks/356-f53269e63c687b55.js","974","static/chunks/app/page-74288f599ea9a6a4.js"],"Image"]
d:I[7150,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/5770a1e11424afd1.css","style"]
0:{"P":null,"b":"5s7kzyMYXRT5K14U6ynZ4","p":"","c":["","blog","react192"],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","react192","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5770a1e11424afd1.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ko","className":"__variable_f367f3","children":["$","body",null,{"className":"font-sans antialiased bg-gray-900 text-white min-h-screen","children":["$","div",null,{"className":"min-h-screen flex flex-col","children":[["$","$L2",null,{}],["$","main",null,{"className":"flex-1 py-8 px-4 sm:px-6 lg:px-8 pb-20 md:pb-8","children":["$","div",null,{"className":"max-w-6xl mx-auto","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}],["$","footer",null,{"className":"bg-white/5 backdrop-blur-md border-t border-white/10 mt-20","children":["$","div",null,{"className":"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12","children":[["$","div",null,{"className":"flex flex-row justify-between items-center gap-8","children":[["$","div",null,{"className":"space-y-4","children":[["$","div",null,{"className":"flex items-center space-x-3","children":[["$","div",null,{"className":"w-8 h-8 rounded-full overflow-hidden","children":["$","$L5",null,{"src":"/msm.jpeg","alt":"MSM Profile","width":32,"height":32,"className":"w-full h-full object-cover"}]}],["$","span",null,{"className":"text-xl font-bold text-white","children":"msm.dev"}]]}],["$","p",null,{"className":"text-gray-400 text-sm","children":["개발자라서 즐거운",["$","br",null,{}],"Front-end Developer MSM"]}]]}],["$","div",null,{"className":"flex space-x-4","children":[["$","a",null,{"href":"mailto:masungmin.dev@gmail.com","className":"text-gray-400 hover:text-white transition-colors duration-200","aria-label":"이메일","children":["$","svg",null,{"className":"w-6 h-6","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"}]}]}],["$","a",null,{"href":"https://github.com/masungmin-dev","className":"text-gray-400 hover:text-white transition-colors duration-200","aria-label":"GitHub","children":["$","svg",null,{"className":"w-6 h-6","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}]}],"$L6"]}]]}],"$L7"]}]}],"$L8"]}]}]}]]}],{"children":["blog","$L9",{"children":[["slug","react192","d"],"$La",{"children":["__PAGE__","$Lb",{},null,false]},null,false]},null,false]},null,false],"$Lc",false]],"m":"$undefined","G":["$d",[]],"s":false,"S":true}
e:I[9240,["619","static/chunks/619-ba102abea3e3d0e4.js","356","static/chunks/356-f53269e63c687b55.js","177","static/chunks/app/layout-159109887e91e394.js"],"default"]
10:I[4431,[],"OutletBoundary"]
12:I[5278,[],"AsyncMetadataOutlet"]
14:I[4431,[],"ViewportBoundary"]
16:I[4431,[],"MetadataBoundary"]
17:"$Sreact.suspense"
6:["$","a",null,{"href":"https://www.linkedin.com/in/%EC%84%B1%EB%AF%BC-%EB%A7%88-306256194","className":"text-gray-400 hover:text-white transition-colors duration-200","aria-label":"LinkedIn","children":["$","svg",null,{"className":"w-6 h-6","fill":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"d":"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"}]}]}]
7:["$","div",null,{"className":"mt-8 pt-8 border-t border-white/10","children":["$","div",null,{"className":"flex flex-col md:flex-row justify-between items-center gap-4","children":[["$","div",null,{"className":"flex items-center","children":["$","a",null,{"href":"https://hits.sh/masungmin-dev.github.io/","children":["$","img",null,{"alt":"Hits","src":"https://hits.sh/masungmin-dev.github.io.svg?style=flat-square&label=Thanks%20for%20visit&color=616161&labelColor=424242"}]}]}],["$","p",null,{"className":"text-gray-400 text-sm order-1 md:order-2","children":["© ",2025," msm.dev. All rights reserved."]}]]}]}]
8:["$","$Le",null,{}]
9:["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
a:["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
b:["$","$1","c",{"children":["$Lf",null,["$","$L10",null,{"children":["$L11",["$","$L12",null,{"promise":"$@13"}]]}]]}]
c:["$","$1","h",{"children":[null,[["$","$L14",null,{"children":"$L15"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$L16",null,{"children":["$","div",null,{"hidden":true,"children":["$","$17",null,{"fallback":null,"children":"$L18"}]}]}]]}]
19:I[2619,["619","static/chunks/619-ba102abea3e3d0e4.js","953","static/chunks/app/blog/%5Bslug%5D/page-06586bb1ae872410.js"],""]
f:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","div",null,{"className":"hidden lg:block","children":["$","aside",null,{"className":"lg:w-64 lg:flex-shrink-0","children":["$","div",null,{"className":"lg:sticky lg:top-24 sticky-sidebar","children":["$","div",null,{"className":"glass-effect rounded-xl p-4","children":[["$","h3",null,{"className":"text-sm font-semibold text-gray-400 uppercase tracking-wider mb-3","children":"태그"}],["$","div",null,{"className":"space-y-1","children":[["$","$L19",null,{"href":"/blog","className":"block w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 text-sm bg-blue-500/20 text-blue-300","children":["전체 (",6,")"]}],[["$","$L19","javascript",{"href":"/blog?tag=javascript","className":"flex w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 items-center justify-between text-sm text-gray-400 hover:text-white hover:bg-gray-700/50","children":[["$","span",null,{"children":"javascript"}],["$","span",null,{"className":"text-xs text-gray-500","children":3}]]}],["$","$L19","React.js",{"href":"/blog?tag=React.js","className":"flex w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 items-center justify-between text-sm text-gray-400 hover:text-white hover:bg-gray-700/50","children":[["$","span",null,{"children":"React.js"}],["$","span",null,{"className":"text-xs text-gray-500","children":2}]]}],["$","$L19","github",{"href":"/blog?tag=github","className":"flex w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 items-center justify-between text-sm text-gray-400 hover:text-white hover:bg-gray-700/50","children":[["$","span",null,{"children":"github"}],["$","span",null,{"className":"text-xs text-gray-500","children":2}]]}],["$","$L19","Langchain",{"href":"/blog?tag=Langchain","className":"flex w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 items-center justify-between text-sm text-gray-400 hover:text-white hover:bg-gray-700/50","children":[["$","span",null,{"children":"Langchain"}],["$","span",null,{"className":"text-xs text-gray-500","children":1}]]}],["$","$L19","git",{"href":"/blog?tag=git","className":"flex w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 items-center justify-between text-sm text-gray-400 hover:text-white hover:bg-gray-700/50","children":[["$","span",null,{"children":"git"}],["$","span",null,{"className":"text-xs text-gray-500","children":1}]]}],["$","$L19","잡소리",{"href":"/blog?tag=%EC%9E%A1%EC%86%8C%EB%A6%AC","className":"flex w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 items-center justify-between text-sm text-gray-400 hover:text-white hover:bg-gray-700/50","children":[["$","span",null,{"children":"잡소리"}],["$","span",null,{"className":"text-xs text-gray-500","children":1}]]}],["$","$L19","Next.js",{"href":"/blog?tag=Next.js","className":"flex w-full text-left px-3 py-2 rounded-lg transition-colors duration-200 items-center justify-between text-sm text-gray-400 hover:text-white hover:bg-gray-700/50","children":[["$","span",null,{"children":"Next.js"}],["$","span",null,{"className":"text-xs text-gray-500","children":1}]]}]]]}]]}]}]}]}],["$","div",null,{"className":"flex-1 min-w-0","children":[["$","div",null,{"className":"mb-8","children":["$","$L19",null,{"href":"/blog","className":"inline-flex items-center text-gray-400 hover:text-white transition-colors duration-200","children":[["$","svg",null,{"className":"mr-2 w-5 h-5","fill":"none","stroke":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":2,"d":"M10 19l-7-7m0 0l7-7m-7 7h18"}]}],"블로그 목록으로 돌아가기"]}]}],["$","header",null,{"className":"mb-12","children":[["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","span","React.js",{"className":"px-3 py-1 bg-blue-500/20 text-blue-300 rounded-full text-sm font-medium","children":"React.js"}]]}],["$","h1",null,{"className":"text-4xl md:text-5xl font-bold text-white mb-4 leading-tight","children":"React 19.2 신규 feature 알아보기"}],["$","div",null,{"className":"flex items-center text-gray-400 text-sm","children":["$L1a","2025년 10월 16일"]}]]}],"$L1b","$L1c","$L1d"]}]]}]
1f:I[528,["619","static/chunks/619-ba102abea3e3d0e4.js","953","static/chunks/app/blog/%5Bslug%5D/page-06586bb1ae872410.js"],"default"]
1a:["$","svg",null,{"className":"mr-2 w-4 h-4","fill":"none","stroke":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":2,"d":"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"}]}]
1e:T3183,<h1>일단 요약해서 보기</h1>
<p><em>요즘 Vecel 기세가 너무 강한 탓인지 SSR에 너무 치우쳐져있는것 같은</em> React 19.0 배포 이후 오랜만에 변경사항이 소개되어 있길래 블로그로 가볍게 트래킹해봅니다.</p>
<p>그나저나 벌써 19가 나온지 1년이 다되어가네요</p>
<p><strong>신규 React feature</strong></p>
<ul>
<li>&lt;Activity/&gt;</li>
<li>useEffectEvent</li>
<li>cacheSignal</li>
<li>performance Tracks</li>
</ul>
<p><strong>신규 React Dom feature</strong></p>
<ul>
<li>partial pre-rendering</li>
</ul>
<h1>React 신규 feature</h1>
<h2>&lt;Activity&gt;</h2>
<p><a href="https://react.dev/reference/react/Activity">https://react.dev/reference/react/Activity</a></p>
<p>이제 단락평가 방식으로 컴포넌트 렌더에 대한 분기처리를 하지 않아도 됩니다.</p>
<p>또한 기능이 단순해 보이지만 여러 이점이 보입니다. 하나씩 알아봅시다.</p>
<pre><code class="hljs language-tsx"><span class="hljs-comment">// Before</span>
{
  isVisible &amp;&amp; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Page</span> /&gt;</span></span>;
}

<span class="hljs-comment">// After</span>
&lt;<span class="hljs-title class_">Activity</span> mode={isVisible ? <span class="hljs-string">&#x27;visible&#x27;</span> : <span class="hljs-string">&#x27;hidden&#x27;</span>}&gt;
  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Page</span> /&gt;</span></span>
&lt;/<span class="hljs-title class_">Activity</span>&gt;;
</code></pre><h3><strong>Mode</strong></h3>
<p>위 코드를 보면 <code>mode</code> 를 지원하는데, 딱 두개있습니다. 이후 여러개를 추가할 예정이라고 합니다. 아마 렌더 방식에대해 좀더 상세하게 컨트롤 할 수 있게 해주려나요?</p>
<h4>&#39;visible&#39;</h4>
<p>자식요소를 렌더</p>
<h4>&#39;hidden&#39;</h4>
<p>업데이트를 연기하고 일을 안하는건 아니지만 지연 업데이트 형태로 유지하는 듯 합니다.
기존 방식은 컴포넌트의 인스턴스 자체를 파괴 제어한다면 이제는 성능에 영향을 최소화 한채 살려두고 있는 상태로 볼 수 있을 것 같습니다. 분기에 따라 전환에 더 무거운 인스턴스더라도 빠른 렌더를 보장할 수 있을 것 같아보이네요.(근데 후술하겠지만 장점이 더 있다)</p>
<p>숨겨진 상태에서는 우선순위가 낮은채로 렌더링은 하고있다고 합니다.</p>
<p>직접 써봐야겠지만 설명으론 <code>display:none</code> 상태라고 합니다.</p>
<blockquote>
<p>아무튼 &#39;hidden&#39; 처리는 <strong>파괴</strong>는 아닙니다. 얼마나 가볍게 컨트롤 될지 궁금하긴한데 적당히 잘 활용해야겠네요</p>
</blockquote>
<h3>알아두면 좋은 점</h3>
<p>특징은 <strong>hidden</strong> 상태가 절대 그냥 잠자고있는 상태가 아니라는 겁니다. 뒤에서 인스턴스화가 되어있고 살아있는 상태인데 단지 좀 게을러진 상태입니다.</p>
<p>그래서 오는 특징이 있는데</p>
<ul>
<li>사전 로딩, 미리 렌더하고있음으로 인한 빠른 전환</li>
<li>비파괴로 해당 컴포넌트의 상태가 유지됨(초기화가 안됨)</li>
<li>tag 자체 상태가 유지됨, react는 video를 예시로서 보여줌</li>
<li><strong>비파괴</strong>이기 때문에 DOM 이 무거워지는 부작용은 걱정해야한다.</li>
</ul>
<h2>useEffectEvent</h2>
<p>기존 <code>useEffect</code>의 사용 패턴 중 하나였던 <strong>이벤트를 보내기위한 과정</strong>을 처리할 때 &#39;보내는 값&#39;과 &#39;트리거가 일어나는 값&#39;이 달라야하는 경우가 있었습니다.</p>
<p>유이펙으로 처리하려면 deps 에 &#39;보내야할 값&#39; 까지 등록해두어야했습니다. 그래서 등록과 보냄의 과정 사이에 봐야할 코드와 책임이 하나의 훅에 모여있어야하거나 deps를 유이펙의 린트룰을 무시하게 만들고 코드를 만들어야하는 형태였죠.</p>
<pre><code class="hljs language-ts"><span class="hljs-comment">// before</span>
<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {
  <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);

  connection.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connected&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-title function_">showNotification</span>(<span class="hljs-string">&#x27;Connected!&#x27;</span>, theme);
  });

  connection.<span class="hljs-title function_">connect</span>();

  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {
    connection.<span class="hljs-title function_">disconnect</span>();
  };
}, [roomId, theme]);
</code></pre><p>하지만 <strong>useEffectEvent</strong>로 이제 각각의 관심사를 분리하고 의존하는 상태값또한 분리할 수 있게 되었습니다. 아마 한번씩은 마주했을 경험일텐데 (이게 이제..) 좋은 신규 피쳐인것같습니다.</p>
<pre><code class="hljs language-ts"><span class="hljs-comment">// after</span>
<span class="hljs-keyword">const</span> onConnected = <span class="hljs-title function_">useEffectEvent</span>(<span class="hljs-function">() =&gt;</span> {
  <span class="hljs-title function_">showNotification</span>(<span class="hljs-string">&#x27;Connected!&#x27;</span>, theme);
});

<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {
  <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);

  connection.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connected&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-title function_">onConnected</span>();
  });

  connection.<span class="hljs-title function_">connect</span>();

  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();
}, [roomId]);
</code></pre><h2>cacheSignal</h2>
<p><em>현재까지는 RSC 전용 요소</em></p>
<p>기존 React.cache에 대한 유틸리티성 기능으로 보입니다.</p>
<p>cacheSignal로 cache()에 대한 수명이 언제 끝났는지에 대해 알 수 있도록 돕는다고 합니다.</p>
<p>그렇게 되면 React에서 관리하고있는 캐시의 상태에 따라서 비동기 동작에 관여하여 조기에 중단할 수도 있습니다.</p>
<p>아래 상황이 생겼을때 signal을 보내기 때문에, SSR 과정 중 발생할 수 있는 상황들에서 알아서 취소가 가능해집니다.</p>
<ul>
<li>React가 성공적으로 렌더링을 완료했을 때</li>
<li>렌더링이 중단(abort)되었을 때</li>
<li>렌더링이 실패했을 때</li>
</ul>
<p>그래서 반환은 <a href="https://developer.mozilla.org/ko/docs/Web/API/AbortSignal">AbortSignal</a> 입니다.</p>
<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> { cache, cacheSignal } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;

<span class="hljs-keyword">const</span> dedupedFetch = <span class="hljs-title function_">cache</span>(fetch);

<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Component</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">await</span> <span class="hljs-title function_">dedupedFetch</span>(url, { <span class="hljs-attr">signal</span>: <span class="hljs-title function_">cacheSignal</span>() });
}
</code></pre><p>사용하는 과정에서 만약 에러가 발생했을 때에는 react.cache에 인한 취소인지 분별이 필요하다면 다음과 같이 권장하고있습니다.</p>
<p>getData layer에 react 의존이 아직 제 눈에 어색하긴 하지만 어댑터로 잘 말아 만들면 그림이 이쁠지 궁금합니다.</p>
<pre><code class="hljs language-tsx"><span class="hljs-keyword">import</span> { cacheSignal } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> { queryDatabase, logError } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./database&#x27;</span>;

<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params">id</span>) {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-title function_">queryDatabase</span>(id);
  } <span class="hljs-keyword">catch</span> (x) {
    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">cacheSignal</span>()?.<span class="hljs-property">aborted</span>) {
      <span class="hljs-comment">// only log if it&#x27;s a real error and not due to cancellation</span>
      <span class="hljs-title function_">logError</span>(x);
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
  }
}

<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Component</span>(<span class="hljs-params">{ id }</span>) {
  <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getData</span>(id);
  <span class="hljs-keyword">if</span> (data === <span class="hljs-literal">null</span>) {
    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>No data available<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;
  }
  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{data.name}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;
}
</code></pre><p>주의사항을 훑어보니</p>
<blockquote>
<p>cacheSignal is currently for use in React Server Components only. In Client Components, it will always return null. In the future it will also be used for Client Component when a client cache refreshes or invalidates. <strong>You should not assume it’ll always be null on the client.</strong></p>
</blockquote>
<p>라는 내용을 보니 향후 ClientComponent에도 지원할 예정인것같은데 이후 반환값에 변화가 있을 수 있어보입니다.</p>
<p>현재는 Client 에서 사용 시 상시 null로 반환된다는 내용이 있었는데, 추후 업데이트에 따라 변화할 수 있다고 하니, 캐시에 대한 흐름 제어가 필요해서 사용한다면 주의해야할것으로 보입니다.</p>
<h1>React DOM 신규 feature</h1>
<h2>Partial pre-rendering</h2>
<p>동적 렌더링 영역과 정적 렌더링 영역을 효율적으로 결합하기위해 적용된다고 합니다.
suspense 전까지는 미리 렌더링해서 제공하고, 동적컨텐츠들은 요청타임(resume)에 렌더해서 스트리밍하는 형태로 이해하면 될것같습니다.</p>
<p>이러한 과정을 만드는데 필요한 ReactDOM API들이 제공되고있는데, <a href="https://nextjs.org/docs/app/getting-started/partial-prerendering">Next.js의 PPR</a>과 함께 보면 알아두기 좋을 것 같습니다</p>
<h1>나머지..</h1>
<p>나머지요소는 SSR에 대해서 서스펜스 경계에 대한 처리를 일괄로(LCP 양호 내에서) 처리할 수 있도록 동작한다던지 <a href="https://react.dev/blog/2025/10/01/react-19-2#notable-changes">SSR 관련 스트림 처리</a> 관련 내용이네요.</p>
<p>얼마전에 React Conf 도 있었는데(위 내용 설명을 포함해서) 팀에서 가고 있는 길이 참 많아보입니다.</p>
<p>그래서 고민이 참.. SSR과 CSR 두마리 토끼를 모두 챙겨야하고 개발자는 이 모든 로그를 쫓아가야하는 과정이 특히 주니어 레벨일 수록 버겁진 않을까 싶습니다.</p>
<p>AI 시대에 도달했지만 내가 갖고 있는 요구사항에 따라서 좋은 퍼포먼스로 이끌어내려면 필요한 기능과 도구를 잘 이해하고 팔로업하면서 아이디어를 제시할 수 있는 역량은 여전히 중요한 것 같습니다. 힘들더라도 다들 화이팅..</p>
1b:["$","article",null,{"className":"prose prose-lg max-w-none","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$1e"}}]}]
1c:["$","footer",null,{"className":"mt-16 pt-8 border-t border-gray-700","children":["$","div",null,{"className":"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4","children":[["$","div",null,{"className":"text-gray-400 text-sm","children":["$","p",null,{"children":"읽어주셔서 감사합니다. 틀린 내용은 언제든지 댓글로 알려주세요."}]}],["$","div",null,{"className":"flex space-x-4","children":[["$","$L19",null,{"href":"/blog","className":"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200","children":"다른 포스트 보기"}],["$","$L19",null,{"href":"/","className":"px-4 py-2 border border-gray-600 hover:bg-gray-800 text-gray-300 font-medium rounded-lg transition-colors duration-200","children":"홈으로"}]]}]]}]}]
1d:["$","$L1f",null,{}]
15:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
11:null
20:I[622,[],"IconMark"]
13:{"metadata":[["$","title","0",{"children":"React 19.2 신규 feature 알아보기 | msm.dev"}],["$","meta","1",{"name":"description","content":"<Activity/>, useEffectEvent 등등"}],["$","meta","2",{"name":"author","content":"MSM"}],["$","meta","3",{"name":"keywords","content":"React.js"}],["$","meta","4",{"property":"og:title","content":"React 19.2 신규 feature 알아보기"}],["$","meta","5",{"property":"og:description","content":"<Activity/>, useEffectEvent 등등"}],["$","meta","6",{"property":"og:type","content":"article"}],["$","meta","7",{"property":"article:published_time","content":"2025-10-16"}],["$","meta","8",{"property":"article:tag","content":"React.js"}],["$","meta","9",{"name":"twitter:card","content":"summary"}],["$","meta","10",{"name":"twitter:title","content":"React 19.2 신규 feature 알아보기"}],["$","meta","11",{"name":"twitter:description","content":"<Activity/>, useEffectEvent 등등"}],["$","link","12",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","$L20","13",{}]],"error":null,"digest":"$undefined"}
18:"$13:metadata"
